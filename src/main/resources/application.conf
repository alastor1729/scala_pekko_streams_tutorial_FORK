pekko {
  # https://pekko.apache.org/docs/pekko/current/general/configuration.html
  # We are interested in log messages from the classes in pkg pekko
  loggers = ["org.apache.pekko.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "org.apache.pekko.event.slf4j.Slf4jLoggingFilter"
  # Level during application start-up until normal logging is available
  stdout-loglevel = "DEBUG"

  # Comment out to allow verbose pekko-http logging
  # http.server.log-unencrypted-network-bytes = 100
  # http.client.log-unencrypted-network-bytes = 100

  # Limit max file size to 100 MB in HttpFileEcho 104857600
  # https://pekko.apache.org/docs/pekko-http/current//common/http-model.html#limiting-message-entity-length
  http.server.parsing.max-content-length = 104857600
  http.client.parsing.max-content-length = 104857600
  http.parsing.max-to-strict-bytes = 104857600
  # For large files raise request timeout (default: 20) using directives, eg withRequestTimeout
  # https://pekko.apache.org/docs/pekko-http/current///common/timeouts.html#server-timeouts
  # This seems NOT be honored anymore
  # http.server.request-timeout = 60 seconds

  # Keep the connection alive in WebsocketEcho
  # https://pekko.apache.org/docs/pekko-http/current/server-side/websocket-support.html
  # If not set, the connection would close on TCP idle-timeout (default is 1 minute)
  http.server.websocket.periodic-keep-alive-max-idle = 10 seconds

  # The shared Host Connection Pool used for HttpFileEchoStream
  # https://pekko.apache.org/docs/pekko-http/current//client-side/host-level.html
  http.host-connection-pool {
    max-connections = 10
    max-retries = 5
  }
}

# Custom dispatcher used to show blocking behaviour
custom-dispatcher-for-blocking {
  type = "Dispatcher"
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 16
  }
  throughput = 1
}

# Custom dispatcher which may be used for tuning
custom-dispatcher-fork-join {
  type = "Dispatcher"
  executor = "fork-join-executor"
  fork-join-executor {
     # Set according to the number of cores
    parallelism-min = 8
    parallelism-max = 8
  }
}

slick-postgres {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    properties = {
      driver = "org.postgresql.Driver"
      # Replaced at runtime with the url obtained from testcontainers which includes the mapped port
      url = "jdbc:postgresql://127.0.0.1:1234/test"
      user = "test"
      password = "test"
    }
  }
}

# Latest reference.conf:
# https://github.com/apache/incubator-pekko-connectors/blob/main/s3/src/main/resources/reference.conf
pekko.connectors.s3 {
  aws {
    credentials {
      provider = static
      # The access key. See AWS|IAM|Security credentials
      access-key-id = "***"
      # The key to sign the requests
      secret-access-key = "***"
    }
    region {
      provider = static
      default-region = "eu-west-1"
    }
  }
  # Replaced at runtime with the url obtained from testcontainers which includes the mapped port
  # endpoint-url = "http://localhost:9000"
}

# https://github.com/crobox/clickhouse-scala-client/tree/master?tab=readme-ov-file#single-host-connection
crobox.clickhouse.client {
    connection {
        type = "single-host",
        host = "localhost",
        # Replaced at runtime with the mapped port obtained from testcontainers
        port = 8123
        health-check {
          interval = 5 seconds #minimum interval between two health checks
          timeout = 1 second #health check will fail if it exceed timeout
        }
    }
    settings {
      authentication {
         user = "test"
         password = "test"
       }
    }
}
# https://github.com/crobox/clickhouse-scala-client/tree/master?tab=readme-ov-file#indexer-configuration
crobox.clickhouse.indexer {
        batch-size = 10000
        concurrent-requests = 1
        flush-interval = 5 seconds
        fast-indexer {
            flush-interval = 1 second
            batch-size = 1000
        }
}